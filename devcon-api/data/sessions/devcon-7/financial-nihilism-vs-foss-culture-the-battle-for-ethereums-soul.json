{
  "id": "financial-nihilism-vs-foss-culture-the-battle-for-ethereums-soul",
  "sourceId": "SSXAMG",
  "title": "Financial Nihilism vs FOSS Culture: The Battle for Ethereum’s Soul",
  "description": "In recent years, the Ethereum ecosystem has witnessed a stark dichotomy: the rise of financial nihilism through memecoins and rampant speculation on one side, and the foundational principles of the FOSS (Free and Open Source Software) community, emphasising public goods, interdependence, and intrinsic rewards, on the other. \r\n\r\nThis talk will delve into the experiences of interacting with FOSS developers, shedding light on their views and concerns regarding Ethereum’s current trajectory.",
  "track": "Cypherpunk & Privacy",
  "type": "Talk",
  "expertise": "Beginner",
  "audience": "Engineering",
  "featured": false,
  "doNotRecord": false,
  "tags": [
    "Values",
    "FOSS",
    "Decentralization",
    "culture",
    "Decentralization",
    "FOSS",
    "Values"
  ],
  "keywords": [
    "Culture"
  ],
  "duration": 1584,
  "language": "en",
  "sources_swarmHash": "",
  "sources_youtubeId": "sNPxhnznfEA",
  "sources_ipfsHash": "",
  "sources_livepeerId": "",
  "sources_streamethId": null,
  "transcript_vtt": "https://streameth-develop.ams3.digitaloceanspaces.com/transcriptions/673336483a168eb535d564de.vtt",
  "transcript_text": " Hey everybody, great to see you all here. Thanks for coming out. I'm Jack Sanford. I'm the CEO and co-founder of Sherlock. Sherlock is one of the largest audit contest providers in the space. And today we're going to talk a little bit about the most common bugs found in audit contests. So if you're a protocol developer or if you want to become a protocol developer one day, you are going to be ahead of 90% of other protocol developers just by being aware of these 10 common bugs. So just a quick intro on audit contests and why you should care. Audit contests have become and are becoming one of the most popular ways to secure smart contract code before deploying a protocol to mainnet. There's been 625 audit contests run. The most have happened this year of any year. So it's really taking off 36,000 vulnerabilities found. 36 million in prizes have been paid out to thousands, tens of thousands of security experts, people who are learning to be security experts, all from finding bugs in these audit contests. And as you can see, the biggest teams in the space are using audit contests. All of these teams have done an audit contest this year in order to secure their code. So what is an audit contest? Essentially, the goal is to find bugs in code, usually critical bugs, bugs that are going to cause losses for users on mainnet. You start with a pot of money. You say, hey, here's 100k. Or in some cases, here's a million dollars. And we're going to pay people based on the bugs that they find. And anybody can participate. So it's a really great way to onboard to crypto, really great way to onboard to Web3 security, participating in audit contests. And depending on the severity of the bugs you find, so if they're critical severity, you're going to get paid more for them. If they're super unique and other people don't find them, you're going to get paid more for that. And if you find, you know, three of the four bugs that are in that protocol during that audit contest, you're going to get paid a lot of money for that. So really cool thing. And we're going to rip through super quickly the top 10 vulnerabilities that are found in audit contests these days. So number one, first depositor inflation attack in ERC4626 vaults. This is a super famous attack, really annoying because anytime you deploy a new vault on a blockchain, you're essentially exposed to this attack because the person who puts in the first deposit can essentially put in such a tiny deposit that it causes sort of a rounding issue and then all the deposits after that are a little bit messed up and the first depositor can steal funds that way and kind of DOS the vault. Second one, using transfer instead of safe transfer. So just using the transfer function in Solidity doesn't actually check the success or failure of a transfer, and it can also allow for really bad things like reentrancy with non-standard tokens such as USDT. Number three, missing validation and admin checks. So let's say you only want the owner of a contract to call a function or someone on a whitelist to call a function. A lot of times there's so many functions you just forget one, essentially, or you forget to check for something that you meant to check for. And that's what auditors are here for, and they're really good at finding that stuff. So this happens more often than you'd think. Okay, missing check for active L2 sequencer. So essentially, if you are deploying a protocol on top of an L2, like arbitrum or optimism, sometimes the sequencer goes down. Not very often, but it could happen in the future, and it could happen for long periods of time. And if you're a derivatives protocol or something where real-time information is super important, malicious actors can take advantage of stale prices because of the sequencer being down. Number five, the classic reentrancy, very first major vulnerability ever in Ethereum, the DAO hack. Basically, there are certain functions where essentially you can continue the execution outside of the function and call that very same function again and this can cause all kinds of problems there's a bunch of different like surface area for what these vulnerabilities can do but i'm sure a lot of you have heard of reentrancy already beyond transfer rebasing tokens so if you want your protocol to be able to handle any token out there, or even a pretty general set of tokens, a lot of them are non-standard. A lot of them don't conform to, you know, things that you would think that they conform to. And so smart contracts can get completely DOSed or funds can be lost because of these tokens having non-standard behavior with your functions. So rounding precision loss issues, this one has become really famous in the last 12 months, even if something is off by a couple of way or to the 18th, 17th decimal place, you can have major issues because of the way that solidity essentially, or the EVM essentially doesn't have floating point arithmetic. So it truncates things it rounds things a little bit and that can cause a lot of issues hitting the last three really quickly here using spot price instead of TWAP and Uniswap so this is something that I think we've all seen price manipulation attacks where someone basically inflates the value of a certain currency in a Uniswap pool for even one block and then does some attack using a flash loan and then it goes back down. So that one is really common, less common these days, thankfully. Incorrect implementation of upgradability. So essentially you want your contracts to be able to be upgraded, and it turns out you hard-coded something in an initializer, you hard-coded something in the constructor, and you can't actually upgrade your contracts, and you only find that out later. So that's kind of annoying, but not too big of a deal unless the initial deployment of your contracts is super critical. Last one, no slippage check in custom vaults and pools. So ERC4626 is great. Use, you know, standards whenever you can when you're developing in Solidity, because if you have non-standard pools, you can actually have your user sign up to get a trade done at one price, and then at the very next block or the very next execution, that price is completely different, and it can be off by a massive amount of percentage points. So your users can get really into trouble if you don't have slippage checks on your functions there. So that's the whole talk. If you're looking to become a protocol developer, check on these 10 things before you send your protocol to audits, and you'll be ahead of 90% of the other developers out there. Thank you, Jack. I see a question over there. When would you do an audit contest? Would it be like after you've done an audit or before you do your first audit or instead of a regular audit? What's the goal there? Yeah, it's a great question. If you can do multiple audits, I would normally say do the audit contest last because you get 300 people. It's a little bit, there's more operational complexity with it because you have to deal with 300 people. You know, Sherlock and others will deduplicate the issues for you. So if you can do a traditional audit or two before that, that's even better because you get to have kind of consultation with somebody and really fix a lot of the things early on. And then when you're like, hey, I think this thing's ready to go to main net, do an audit contest, and you'll find all the other stuff, essentially. That's the goal. Hi. Are there any standard protocols or platforms for holding these contests that you can recommend? Yeah, so I'm the CEO co-founder of Sherlock. Sherlock is one of the main ones, so I'm obviously very biased-founder of Sherlock Sherlock is one of the main ones so I'm obviously very biased but there's Sherlock there's code arena there is munified does them as well now there's a platform called cantina code Hawks hats so there's a few platforms out there thank you any other Any other questions? We have one here. Thank you. All this is very expensive. So what is your suggestion for small debt with very tight budgets? Thank you. Yeah. If you have a tight budget, I would say just try to keep your contracts as simple as possible. Every line of code is going to cost you money when it comes to the auditing phase. And you really want to pay per line of code. Essentially, you need to pay for the best people because those are the people who know how to hack contracts. And those people exist on the black hat side, like the bad guys. So you need to make sure you're paying for the best good guys as well to ensure that you find those vulnerabilities before you go to main net. So if you're kind of bootstrapping, just try to keep your code as small as possible, as simple as possible. Use other code that's already been audited if possible. And when you actually do do an audit, don't go for the cheapest provider because you really want to get that top talent, even if you have a small code base.",
  "eventId": "devcon-7",
  "slot_start": 1731400200000,
  "slot_end": 1731402000000,
  "slot_roomId": "stage-3",
  "resources_presentation": "https://docs.google.com/presentation/d/1Qlvu4fLzJTTaotuNmKf4QNZRg5u7Im3WjKq6D2kS0Vw",
  "resources_slides": null,
  "speakers": [
    "eleftherios-diakomichalis"
  ]
}