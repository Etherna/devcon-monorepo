{
  "id": "keynote-nomic-foundations-vision-for-ethereums-tooling-ecosystem",
  "sourceId": "VQKXUH",
  "title": "Keynote: Nomic Foundation’s vision for Ethereum’s tooling ecosystem",
  "description": "Nomic Foundation is the nonprofit behind Hardhat. Nomic’s co-founder and CTO will walk you through Nomic’s long-term vision for a community-driven developer tooling ecosystem for Ethereum.",
  "track": "Developer Experience",
  "type": "Talk",
  "expertise": "Intermediate",
  "audience": "Developer",
  "featured": true,
  "doNotRecord": false,
  "tags": [
    "Developer Infrastructure",
    "DevEx",
    "Tooling"
  ],
  "keywords": [
    "ecosystem"
  ],
  "duration": 1058,
  "language": "en",
  "sources_swarmHash": "",
  "sources_youtubeId": "1YyDB4bwJ2k",
  "sources_ipfsHash": "",
  "sources_livepeerId": "",
  "sources_streamethId": "6736b9499dbb7a90e1229100",
  "transcript_vtt": "https://streameth-develop.ams3.digitaloceanspaces.com/transcriptions/6736b9499dbb7a90e1229100.vtt",
  "transcript_text": " So, hi everyone, thanks for being here. I'm Patricio Palladino, I'm one of the co-founders and the CTO of Nomic Foundation. Nomic is a non-profit dedicated to improving the Ethereum development platforms for builders like you. At NOMIC, what we do is creating open source infrastructure and tooling for Ethereum. And our most well-known tool is HardHat. And we've been building HardHat for quite some time. We started it in 2018, so almost seven years ago, and it grew from being a side project to being a collection of different tools that includes not just HardHat, the task runner, and the framework, also a network simulator. It includes things like a deployment solution and better support for solidity in VS Code and different editors. Creating these things exposed us to almost the entirety of the infrastructure landscape of Ethereum, and we got to learn about its limitations. And I want to share a few learnings that we got so far. The first learning is that building tooling for Ethereum is challenging. It's actually pretty challenging. And this is not something exclusive to Hard Hat. If you were to build any kind of tool or infrastructure in Ethereum, most probably you'll find yourself with unmet needs and you will have to either create your own solutions or your own workarounds or hacks. To see some examples, if we were to create a Solidity formatter, which is just a tool that takes your Solidity source code and reprints it in a nice format, the first thing that you would need is a parser. A library or a tool that takes that text, processes it in a way that it will allow you to then pre-reprint it easily. And yeah, you will find some parsers for Solidity out there, but all of them will have their set of limitations. They may either parse in somewhat approximation of Solidity, that it's not clear which particular version they are parsing, or they may be parsing a single version where your tool wants to process every version of Solidity. Or they may be tied to a single programming language, like I want my tool to be built in Rust, but the parser that I want to use is built in JavaScript, and I can do it, and I don't know, find a workaround or hack it together. And this leads to clearly less than ideal solutions. To see some more examples, if we were to build a Solidity linter, we would have all those same problems and more. What if we wanted a type-aware rule that, I don't know, forbids that you use a certain type as storage of your context? Well, you'll definitely, definitely not find a library that exposes the Solidity type system for you to build this rule simply. So what would you do? Well, you either build a part of that, probably in a quick and dirty fashion, or maybe come up with a half-baked solution that is just a bunch of heuristics, maybe a regular expression or something like that. If you were to build a Solidity Editor, things would be way, way worse. And trust me, we've been there. We built one. And you pretty much have to reimplement a good chunk of SolSys code analysis. But those examples that I named are just three out of a ton of different tools and infra pieces that any realistic or mature development platform has. There are more examples that I listed here, but to be honest, these are just some examples that came to my mind and that could fit in a single slide. In a mature platform, in a real world... Well, it's not that Ethereum is not real world. It's just less mature. In a mature platform, there are tons and tons of tools, and there are constantly new tools being created. But in Ethereum, if you were to create any one of these tools, I assure you that your experience won't be smooth. It will be similar to the things that I mentioned. You will find yourself and make limitations and you will have to come up with your own solutions. And to make things a bit worse, some of these tools, you would want them to exist in different languages. Maybe you want connect a language in JavaScript, in TypeScript, in Python, in Java, and that just adds some kind of multiplication to the problem, making it larger. Then another learning that we had is that Ethereum is a moving platform. And what do I mean by this? Well, for once, Ethereum is constantly evolving. It evolves through hard forks, but also through layer 2s. And there's tons and tons of changes coming up now that are due to new layer 2s popping up every day. Also, the tooling and libraries change. We went from using Web3.js at one point, then to a new version of Web3.js that was completely different, then , then VM. And I'm sure that things will still change. Finally, another thing that also changed is the developer needs themselves. They build different kinds of applications. At one point, we were all building stable coins, then NFTs, then DAOs, then different things. And those different things have different needs and different levels of complexity and size. Not to say anything about multi-chain. That it's now completely changing the needs of developers. Just a few years ago, things were way simpler for an Ethereum developer, now they have to deal with multiple chains at the same time, and things just get harder. Now, to be honest, this is not something unique to Ethereum, it happens everywhere. Every software development platform that is alive and continues to evolve goes through constant change and renewal. It happens to Node, it happens to every single language. What is unique to Ethereum is the speed of change and the fact that every tool is built based on hacks and workarounds as I described. And when you combine those two things, things changing quickly and things being unreliable, you get a ton of fragility in the platform itself. And finally, the other thing that I or learning that I want to mention is that as I mentioned before, at Nomic, we don't work just for HardHat. We work for the entirety of the Ethereum development platform. We want to improve it all. And at one point we realized that we can't just do it through HardHat. And we can't just do it by being direct providers of finite solutions or developer solutions. Why? Because we have limited bandwidth, we can only focus on so many things. Our team has a limited set of people, hopefully it will increase, but it will still be limited and we just can't fix everything. Also, if we were to be direct providers of every single solution, we could become an ecosystem dependency, a core ecosystem dependency, and that's not something that we want to be. And at the same time, doing that would or could potentially make us gain a ton of influence on the platform, and that's not aligned with the values of Nomic. Finally, if we were to build every solution ourselves, we would be making a ton of decisions, because we won't build any of the many technical approaches for every single tool. But we would have to pick one, or at most two. And that would lead to less technical exploration, less approaches to every single problem, and that could inhibit part of the potential of the platform. It's better to have diversity of ideas, diversity of technical solutions, and that then every developer, every project will pick whatever fits best for them. So instead, at Nomic, our long-term vision is to build the core pieces of infrastructure that would enable the ecosystem itself to build its own tooling and do it efficiently. And at the same time, doing it from a non-profit and independent non-profit that has clear Ethereum aligned incentives. Which are these pieces of infrastructure? They are two. One is called Slang and the other one EDR for Ethereum development runtime. Slang is a Solidity compiler as a set of APIs focused on tooling. What does it mean? Well, if we go back to the examples that I mentioned and we wanted to create a formatter, and this is actually doable now, you could use Slang's formatter. Sorry, not formatter. Slang's parser. That parser will be ready to be consumed from many languages, is ready to be consumed from many languages, and it's easy to use, supports many languages of Solidity, and it's actually being used by a beta version of Preacher Solidity right now, and it improves how Preacher Solidity can format different versions of Solidity. For a linter, similar thing. You get Slang, it's a library. You get to use a different set of APIs that Slang proposes, exposes. But same thing, you just have the building blocks available for you. By design, Sl slang is focused on tools, because tools tend to have a different set of constraints than just a traditional compiler. For example, they may need to deal with different versions of the language, while a traditional compiler just deals with one. In a tool, you want a single tool to be able to handle almost or all the entire history of the language, while a normal compiler can just focus on a single one. Same with things like error recovery. You may want your formatter to be more permissive in the presence of or forgiving in the presence of errors. And similar constraints like that that make having a tooling-oriented compiler a great piece of infrastructure for tool developers. And it's published as a library, so you can use it either from Rust or TypeScript. And it's also targeting Wasm, so you can even import it from other places. Now EDR, it's a portable library, also written in Rust. It implements an Ethereum simulator, including some layer 2s. That means that it simulates the network. It's already in production. It powers HardHat 2, the current version of HardHat. When we released it, we saw performance improvements, massive performance improvements actually, in some HardHat projects. Some of them just without changing any single line of code, just by updating their dependencies, starting running 10 times faster. At the same time, EDR will simulate optimism or obstetra change soon, and it will include a Solidity test runner. Again, this is a library. This is not just built for hard hat. Anyone can install it, and it can be used for any kind of tool that needs to run simulations or do any kind of runtime analysis. Finally, Slang and EDR are sister projects. What does that mean? That they are designed to work together. And that's because the combination of both will allow us to do way more advanced things than what we can do with each of them in isolation. Right now, we have a compiler. So let's see, built by one team, we have our own runtime. It's hard to collaborate deeply enough to build things like, I don't know, picture, Chrome development tools, the debugger, you can change variables in real time, you can rewrite parts of the code, keep running. Those kind of things are possible. We can build them in Ethereum, but they do require a ton of deep collaboration and integration between the compiler and the runtime. And that's the kind of thing that we are going after at Nomic. We want EDR and Slang to mature to be libraries that everyone can use. They will provide the basis for anyone to grab those tools, grab those libraries, and build the next generation of Ethereum tooling with them. And that's it. If you want to learn more about Nomic, you can scan the QR code, I guess it's on your left. That one has information about the different presentations that we are giving at Nomic, that we are giving at DevCon. One of them, yesterday I already gave it, it's about Hard Hat 3, the upcoming version of Hard Hat. It's not ready for production yet, but there is an internal alpha and tons of information in that presentation. It's recorded, so you can watch it. Today, I think at 5 or 6 p.m., there's a presentation by one of our team members that's going to explain how EDR can simulate different tail chews, different networks. And tomorrow at 12 or 12.30, there is a presentation about Slang and how you can use it to analyze your Solidity code with some pretty cool APIs. Finally, if you want to work with us, you enjoy the kind of thing that we do, you can scan the other QR code and learn more about show offerings, show positions at Nomic. That's it. Thank you. PATRICIA MARINI- Patricio, thank you so much. And for everyone, it's still open for QA, so just QR this code. We do have one question here for you. So can EDR be used for things like simulation with altered storage state, storage of rights in tenderly terms? Yes. Sorry, but that's the whole answer, yes. It can. We have another question here. When will advanced testing features like symbolic debugging be integrated or will it be possible to connect in advanced nodes like BuildBear sandbox inside of hard hat nodes? Well, I don't think I have an answer for the first part of the question. We'll have to analyze it, I can promise, on any timeline right now. The second one I think should be possible, yes. If not, just reach out through GitHub and we can analyze it. We do have another question here. Automatic task generation, is that something that the NOMIC Foundation is interested in adding? Wait, I can't read it. Shouldn't we do can EDR be used for... Okay, cool, thank you. It's not our... I'll re-read it just in case. Automatic is that something? It's not our car- I'll re-read it just in case. Automatic test generation, is that something that the foundation is interested in adding? It's not our current focus. I think there's a ton of development going on, super interesting, on AI. But that's not the focus of our organization. If there is a way to integrate those things cheaply, we will. But Hard Hat itself, it's a super flexible platform. You can build your own plugins. So if you want to experiment with this and create your own automatic generation plugin, automatic test generation plugin, should be super straightforward. Go try it out and tell us how it went yeah perfect, Patricio thank you so much for your presentation thanks everyone for your questions we'll be back in 15 minutes",
  "eventId": "devcon-7",
  "slot_start": 1731567600000,
  "slot_end": 1731569400000,
  "slot_roomId": "main-stage",
  "resources_presentation": "https://docs.google.com/presentation/d/1kH4iHwoLEeXM3eu44ZJv-USuH2XZbecC-mTN78JbaFE",
  "resources_slides": null,
  "speakers": [
    "patricio-palladino"
  ]
}