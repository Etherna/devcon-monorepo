{
  "id": "programmable-cryptography-and-the-future-of-the-internet",
  "sourceId": "JVGEDS",
  "title": "Programmable Cryptography and the future of the Internet",
  "description": "You rarely hear of issues at the networking layer of the Internet: networking companies are running utilities business: they are fungible and can be swapped if distrusted.\r\nMost of the value captured on the Internet -- and also most abuse -- happen at the Compute and Data layer of the Web. Ethereum gave us a glimpse of a fundamentally different architecture for Compute and Data than Client/Server architecture.We think the Internet is 1/3 complete, and that programmable cryptography can finish it.",
  "track": "Applied Cryptography",
  "type": "Talk",
  "expertise": "Intermediate",
  "audience": "Engineering",
  "featured": false,
  "doNotRecord": false,
  "tags": [],
  "keywords": [
    "None"
  ],
  "duration": 1525,
  "language": "en",
  "sources_swarmHash": "",
  "sources_youtubeId": "onclocmZeR0",
  "sources_ipfsHash": "",
  "sources_livepeerId": "",
  "sources_streamethId": "67341d7a9dbb7a90e166b21c",
  "transcript_vtt": "https://streameth-develop.ams3.digitaloceanspaces.com/transcriptions/67341d7a9dbb7a90e166b21c.vtt",
  "transcript_text": " Let's go. All right. Good morning. Thanks for coming to the early first talk. I know DEF CON doesn't want my ideas to be spread when they put me at 9.30 a.m. when people are still sleeping. So my name is Justin Glibert. I'm one of the co-founders of Xerox PARC. I will give you about 10 more seconds to get situated and then we will start. We have quite a marathon because right after that I'm doing another talk with my friend Hilmar. So no break. Nobody can leave. If you get out, I'll remember your name. All right. So clicker test. Let's go. Okay, so if we soberly look at the amount of hardware we've deployed, you know Like exa flops of servers millions of kilometers of underwater sea cable thousands of satellites We combine that with the humongous amount of data available on the internet both public data Enough to train matrices into being able to think but also private data most of people's desires hopes dreams and preferences are actually somewhere online and we intersect this data. Most of people's desires, hopes, dreams, and preferences are actually somewhere online. And we intersect this with the amount of people that connect to the internet daily, about 5 billion of them. It's pretty clear that we're not doing as well as we could when it comes to the internet, right? And also like our digital infrastructure at large and what we can do online. And you're free to show us the problem you care about, whether it's strong lock-in, data silos that makes a lot of stuff much harder than they should be, the inability to make money out of basically any kind of content and its corollary being the never ending rain of ads, censorship, accumulation of power through network effects. There are a lot of issues, right? And so how did we get there? We have this like incredible amount of physical infrastructure and mental modeling to people's heads. How do we get to this kind of like very disappointing outcome? And so let's go through a real quick history of the internet and the web in order to explore this a little bit. So what started as a few military and educational networks in the US that got connected together as the ARPANET. After a few iterations on a packet format in 1983, TCP IP was standardized and shortly after the ARPANET was dissolved in favor of the Internet. This is a screenshot I took from the global stats of the BGP network and now the Internet is made of about 30,000 different networks connected together. And so if we take out the info cart of what the internet fundamentally does, is that it connects any two nodes with each other. The internet is peer-to-peer and completely symmetric. What this means is no node is really more important than the others. They're all like part of this system together. And the way you roll is you get an IP address and you start sending and receiving packets. So if we go a little bit forward, in 1999, Tim Bernanley, a physicist at CERN, wrote a paper that introduced the web as interlinked hypertext documents accessed via the internet. So if we break that down, interlinked is this URL acronym you must have seen before, the Uniform Resource Locator. It's almost like a universal language for describing resources on the web. The hypertext, what is now known as HTML, because we can't be bothered to say very fancy words from the 90s anymore, is document format that enables you to interactively click around and move through stuff. I mean, you guys know this. You use it every day. And these documents are rendered in a human-readable output via browsers. So the web at that time was very much just like a bunch of researchers sharing papers with each other. In fact, if we bring up the InfoCard again, what the web does fundamentally is it connects hypertext documents with each other. And it's also peer-to-peer and completely symmetric. Like anyone can host hypertext documents, anyone can browse them. A fun piece of trivia that reflects the philosophy at the time is that operating system came bundled with HTML servers, right? Producers and consumers were the same. People were expected to put their content online and browse each other's stuff. And this brings us to where we're at today, which is the modern web where? Tools content and networks with their social financials are accessed via the internet and the web 1.0 tooling So if you look at the stack on the top right corner with TCP IP at the bottom the web 1.0 in the middle and then kind of like the the The most common architecture we have now on top, which is the client-server supernode architecture. And the topology of the web changed a lot. Instead of a bunch of awkward researchers sharing their thoughts on their university page, we ended up with a bunch of massive nodes and a lot of dumb terminals around them. Like if we take the info card of the web, we're essentially back to timesharing with a lot of dumb terminals and a few big important computers. We went from a peer-to-peer model to a client-server one, which is very asymmetric. We have a couple of hundreds of very important nodes and everything else is a dumb client. And that leads to an extreme centralization of data, computation, power, infrastructure, and economic outcome. So if we look at this, we have two different lenses. One is downside prevention. Essentially, if we want to do better, we can do better by reducing the bad things. So if we think that centralization of data, computation, et cetera, is bad, how can we reduce them? But a lens I'm even more interested in is the upside creation one, because it's the one that is often lost. Most interactions and computations that could be possible on the internet do not happen, right? It's not like the stuff you do on an everyday basis covers 100% of what you can do with the deployment we have today. And the reason is that the coefficient of friction is still very, very high. If you're not part of the aggregators, you can't add new features to the internet unless you go through Y Combinator and build a startup, which is so strange if you think about it. Why do we need something as extreme as startups? We're talking about people working really hard under a lot of risks or not for a long time in order to get new stuff to happen. And actually, it's only possible because the aggregators are lazy, right? Like, why can't we have a feature on the internet as soon as someone wants it? And so regardless of which lens is interesting to you, whether it's the downside prevention one or the upside creation one, I think it's clear that it's not the best we can do with the amount of data, hardware, and connected internet users that we have. So for fun, let's go through a set of analogies to take seriously but not literally. So the internet laid down the primordial digital sea. All computer networks, whether puddles, rivers, or seas, became connected in one big soup of TCP IP packets. And from that soup, we gained the ability to have some structure, hypertext documents, emails, SSH. It wasn't much, but it was honest work and while we had dreams of growing into a metropolis where multiple people would be able to coexist within zones of trust and transparency just like a city we mostly ended up in the theme parks right like mostly stripped of our agency only a lot to create what it makes sense economically like being allowed to put our best smile in a roller coaster ride where you have to like buy the photo at the end. We're kept around for as long as possible. We have fun stuff to do. Not owning anything. Paying the entry ticket every day, either through our attention or labor. So this is a little bit overly dramatic, but you get my point, right? Like we have concrete and electricity and, I don't know, all that beautiful stuff. And we build one massive Disneyland. So how do we end up in the theme park? Right? And not the metropolis? Well, because we were on such a good path. What happened? And one way to look at this problem is clearly identifying what did the internet give us, right? And what did it not give us? And I think people don't think about this enough. Like we tend to think of like, oh, the internet, it just exists, it's done, we don't really think about it anymore, and we build a bunch of apps on top of it. What did the internet give us? What did it not give us? Where did it fall short? And one way to think about the internet is as the perfect pipe. It delivers packets securely across the entire world, it's peer-to-peer, it's fully encrypted point-to-point via TLS. It's symmetric, it works for all nodes, it doesn't really care who is the from and the to. It's civilizational scale. In fact, the perfect pipe is probably the only digital civilization scale technology today. It's built entirely with generation one cryptography, with signature hashes and encryption. And in fact most of the most successful protocols today, whether email, SSH, torrent, are all built only with the pipe, only with the pipe as an assumption. And so if we take out our civilizational dashboard, we can tick the networking checkbox. We have a system with capital T trust in the networking. But this begs the question, how do we tick the other boxes? We're not done. We're not done. We think we're done, but we're not done. We're not done. We think we're done, but we're not done. So, and to motivate that, like, how do we build beyond peer-to-peer transmission systems? Email is still the most successful identity, recovery, and neutral communication layer. Lots of innovation and low barrier to entry in order to innovate, right? And still, still, even with the perfect pipe, with spam, which cannot be checked at the layer of the pipe There are network effects that led to accumulation of power to big players like Gmail How do we compute over mutually private data? Like most of what we do on internet today is mutually private data for the friends of my friends who likes me on tinder Who would take my bid on this financial exchange? How do we authenticate the origin transformation and aggregation of data? Why can't we just index the whole internet once and give it to people? Why do we have to like do it and then like do rent seeking on top of that? It's a bit strange, right and Because we trust in networking with a capital T trust, right? How can we trust the data and the compute and we have this massive hack this like great theater? Which is the clients of our architecture and institutional harness as a way to solve it And so we connected the perfect pipe to what we had, you know, like black box opaque servers. The default without accumulation of brands or an iterated game is abuse, data leak, downtime. While you don't think twice about sending a TCP IP packet to an IP address, you're not like, wow, this IP address is a bit sketchy. I wouldn't send an IP packet there. You do think twice about putting your credit card number on a website, right? Because you trust the pipe. You don't trust the compute and the data. And some nodes, of course, did better than others and started accumulating power. That's a classic story. So we ended up on, like, Trust Me Bro as a fallback, which merely started believing computing in data with the client server architecture. Computing these servers and store your data there, believe in what comes out, accept what you cannot ask for. And you rarely, and this is an interesting point, you rarely hear about abuse, friction, hacks, downtimes, antitrust at the networking layer, right? Even the most powerful actor like Cloudflare are essentially utility businesses. We could remove them at any time and be fine, right? They augment the perfect pipe but they don't turn an imperfect pipe into a perfect one. Meanwhile you often hear about all of these issues in the data compute layer like hacks, censorship, downtime, API not supported, abuse of monopoly and power. And so I don't think we should like be too harsh on ourselves because at Xerox Spark we actually believe it's impossible to do better than the perfect pipe without generation to cryptography. We're actually trying to mathematically prove it right now. The perfect pipe is as best as we can do with asymmetric encryption, hashes, and transport layer security. Okay, so we're gonna go a little bit grandiose for a second. We have civilization-scale networking, right? What do we do now? We do have two other boxes, compute and data. How does the landscape look like today on this effort here? So for computing, we rely almost exclusively on companies that have had to accumulate brand power, data, and have a lot of things at stake in order to painstakingly build these trusted compute network, right? If you've seen the panel between Vitalik and Goop Sheep yesterday, that's what they're referring to as trusted third party. So Facebook can answer, who are the friends of my friends? Tinder can tell me these people like you. Google can tell me as a business you can give money to these people and they will put ads out for your product. And for data, we have entities that also had to accumulate trust and network effect in order to generate authenticated data. Ply tells other companies how much money I have, Stripe makes sure they get paid, ID.me tells them the person I claim I am. And so it's extremely hard to add new capabilities to the Internet. While you don't think twice about sending a TCP IP packet to an IP address and know it will be delivered securely, the amount of effort needed to build trusted parties is pretty enormous. So we think that we can collectively add new dimensions to the Internet with programmable cryptography, right? And I will make a note that I'm disappointed with my choice of word here. I very much call it the internet because I don't really know what else to call it. If I were more ambitious with my meme-making this morning, I would refer to what I'm talking about as digital civilization. Like, we're in the process of approaching digital civilization, like actual digital civilization. But in order to do that, we first have to recognize, A, the existence of the pipe, and B, the fact that we have to get to work on the other perfect primitives. So how would that look like to create these new dimensions? We would have to construct compute that we can trust with a capital T and data that we can trust as well with a capital T. So programmable cryptography that we understand today can be used to construct the perfect packet of data. This can be done. It's a packet that can be cryptographically authenticated, whether it's a web-to-API, an email, the government. Its integrity can be verified. A packet with verified transformation, any operation on the data, whether aggregation, the forward pass of a machine learning model, data science filters can be verified. And in that way, unbundle data processing from silos and enable self-custody. It's a packet with information asymmetries backed into it, like properties can be hidden and transformed just in time, prove that you're old enough, credit-worthy enough, cool enough, able to log into this machine. The perfect pipe is ultimately a piece of data that can stand on its own. A piece of data that maintains its usefulness in context as it travels across our civilization. Okay, deep breath in. Let's keep going. Another digital object we can create with very strong programmable cryptography is the perfect computer. It will be fully encrypted, input, compute, output. It will be always online, have perfect blindness. We will be able to run it, distribute it on any untrusted hardware. No need to have the guy with the guns and the glocks at the entry to make sure nobody gets in the data center. We permissionless, anyone can use it. Public data would be really public, right? Not sometimes public. And private data would be really private. In some sense, this would be God's AWS, right? This is what the universe runs on. And as a side note, blockchains went surprisingly far with generation one cryptography in order to build something that approaches this, right? Like they were able to build these infinite liveness computers that are always online and are transparent. But in order to close the future gap between blockchains and the client-server architecture supernode, we need programmable cryptography. Or maybe something even more powerful that we don't know about yet. The end product doesn't necessarily need to look like a blockchain. The presence of blocks, cryptocurrencies, transactions, etc. is very much a detail, an implementation detail. It's important to note that the network effect of the perfect computer would be pretty insane, right? Like when you have a computer made from godlike matter, people would probably use it. But I think what's interesting is this network effect would accumulate to the protocol itself, not whoever built it or its operators. So we call these three objects the perfect primitives. I wouldn't be surprised if there are more of them at the end of the day. And I wanna close this talk by telling you how I think Ethereum fits within this cosmology. Ethereum is undeniably a production-grade payment system. But also, perhaps surprisingly, Ethereum is a mother of all demo for new perfect primitives beyond the pipe right like all of you here that have been working in this in this in this ecosystem for a long time feel like there is something special about that computer and people struggle to explain what's special about it and my claim is the thing that's special about it is it's the first time we have actually like a real shot at building another perfect primitive beyond the pipe but I don't think like blockchains is the only thing that can approach these perfect primitives. There are a lot more celestial matter out there that we can tap into in order to go beyond the perfect pipe. And so recognizing the existence of these primitives, right, with one of them actually being at arm's reach right now, it helps us situate Ethereum and the other technologies we're working on as being part of this like pantheon of perfect. So I hope this talk can enable you to think better in the weeks to come about what you're working on. Thank you. All right. Thank you, Justin. And that's so excited. I would like to give you another 30 seconds. Just scan it and then go to the Q&A session. And then even if you don't have any questions, just go there and get bored to the questions that you want it to be answered. All right? Thanks. Let's give more 20 seconds so people can jump in and vote. Alright let's grab the first one. What are the core incentives for the incumbents on the web to transition to new models which you have spoken to? Why would they want to relinquish more control? Justin. Yeah. So I think there are two ways to look at this. One is, as I said in my talk, I think it's really easy for people to think about the thing that's not working and be like, oh, if only we could solve this and solve that. I think it's much harder to think through everything that we don't have right now because we can't think about it. Because we've not followed the right initial conditions in order to get there. So I think core incentives in some ways would be less about like relinquishing control and ideally even winning bigger you know like at some point you realize that if you're if you're the biggest dog the competition is not that big like sometimes you can be reasoned into kind of like entering an even greater game and i think that's one approach it's like being able to show progressively that there are greater games to play and entering these greater games while you would relinquish control It's like being like a high school bully, you know, like yeah, you have a lot of power But you'd rather get into the real world and kind of like have much more to play with so that's one possibility But I think it's a little bit idealistic to be able to make that case I think another thing about releasing relinquishing control, I don't know if some of you know the idiom like science advances one death at a time. I think it's important to know that the computing industry has not had many deaths yet. People talk a lot about these like odd massive companies, there is still founder control, they're the ones that are gonna like, I should put my money into. And I think there is definitely a place where a lot of the system could change very quickly. And so whether it's through stretch to the system, like AI getting really good, or just incumbents progressively getting worse at innovating, there are ways to change this. But I don't think it's a clear incentive story as in like, oh, do one, two, three, and then we figure it out. The whole point of this talk is to try to get you to think about, huh, there's actually a lot that we haven't thought about. It's not like it's really clear what we have to do. It's just really hard. We have to wake up every morning and work really hard on it a lot of things that we haven't done yet, what's the most concrete thing that Xerox PARC is working on to advance this agenda? Yeah, so there are a lot of presentations, workshops put together by Xerox PARC this week, so you can actually answer that question yourself by going to some of that, but I'll give a little add. So one thing we've made a lot of progress on over the last year by putting together industry, academia, engineering, etc., is starting to make progress on what this perfect packet of data would look like. People have the right intuition that something like zero-knowledge-proven cryptographic data is a good step, but actually many, many problems to solve afterwards, some that are actually deeper than you think, not just an engineering issue. So I'm actually giving another talk this afternoon about this. You can find me on stage six. I have a talk about the universal cryptographic adapter. But if you just want to like immerse yourself into one full day of like, what would a future look like if we were to work on this seriously, come to the Programmable Cryptography CLS on Friday. The whole day is just workshop and talks about this stuff. And there's been actually a lot of interesting breakthrough over the last six months, and I think you will be surprised by what we can do now. That's nice. You should check it out Saturday. Next one. However, the good primitive. Don't you think people want to go to the theme park anyway? Yeah, that's a good point. So, as I said before, it's really hard in general to think through what you don't have and strive for that versus trying to just solve the problems you're currently facing right now. So, I think that, well, there are different answers. One is a bleak one, which is let the theme park goers go to the theme park and let everybody else ascend. In fact, we probably don't want to do that because we feel responsibility toward the rest of our fellow humans. So I think it's going to be a difficult thing. Like we're definitely in a crisis right now where people's, I mean, we talk a lot about attention span, but I don't think this is the worst. I think almost like the integral of outcome you expect in your life is kind of shrinking. We've been talking a lot about younger people not being able to buy houses and spending all of their money. I think this thing applies equally everywhere. It's like return over intellectual effort, return over financial efforts. And so as we turn into a civilization that is more and more inclined to go to the theme park, I think we have a big, big effort to put here to figure out how we can get out of that. But at the end of the day, I think that we don't have a credible story for something that would not be the theme park. What I find fascinating is in sci-fi, we have a lot of stories that resonate to people with a lot of different kinds of technology, like build an artificial sun, go to Mars, create a god, whatever. But we don't have good stories about what a good digital civilization would look like when it comes to having symbiotic with the people. What would it look like? Is it just like being able to watch 10 movies at a time on Apple Vision Pro? No, it's not about that. It's about communion with everybody else. The thing is we don't have good stories for that. So I think that in order to get people out of the theme park, we have to just think better, make efforts technologically, but not just do the thing which is like the classic technocrat answer, which is like, we have to build more technology and everything will solve itself. And the page broke. So I guess no more questions. No, that's good. I remember the next one. So the next question is, do you think AGI or can would help us to invent the advanced mathematical breakthrough for the next generation of cryptography? Or it's just going to come from the mathematicians? What do you think on it? Yeah, I mean, for sure. I think that's actually the thing I'm more excited about. I don't want AI to make shit up that we can't verify. In some sense, I hate it when it writes code and gets it wrong because it has no way of checking yourself. The really great thing with math is that if you ask it to put together a formal proof and put in a theorem prover, you know whether it's right or not. So I think we should put more effort into getting these AI models to do things that we can verify at the end of the day. So for sure it would be helpful for the mathematics out there. I think we've got the last one. Ethereum does a good job at a decentralized compute, but it's way behind for data. What do you think can be made? I think the reason for that is because you can only go so far with an open computer. If you have an open registry of stuff and compute on top of that, it's really hard to take a central role when it comes to data. Data is not a native thing that is thought of as like, oh, here's this open thing that anyone can go on. So I think that's one of the main reasons it doesn't do a great job with data. What do you think can be made about this? I think I'm not even sure blockchains are the right constructions for what it's worth. I think people like to meme the fact that we're going to put the entire internet on Ethereum and sorry to tell you it's not going to happen regardless of how much scaling works the ETH core devs do. So I think we have to like kind of like get out of a delusion that it's just going to happen and think through okay what's the the whole space of stuff we can do here. What are the other perfect primitives? All right, ladies and gentlemen, this is Justin Gilbert. Thank you, thank you. And the future of internet is exciting. All right. Yes, the next session will start at 10.30 a.m. And if you are thirsty, we provide a water bottle at the back of the meeting rooms. You can",
  "eventId": "devcon-7",
  "slot_start": 1731465900000,
  "slot_end": 1731467700000,
  "slot_roomId": "main-stage",
  "resources_presentation": "https://docs.google.com/presentation/d/1yuek7FVsP0Ov8ZWMCbVJX0zA_KsFKhhx7JBnbKcs_qY",
  "resources_slides": null,
  "speakers": [
    "justin-glibert"
  ]
}